problem space ~ analysis
solutions space ~ design
-> split above metioned
purpose: to prove systematically that the desing fulfills the requirements and the code matches up with the design

artifacts:
  unit tests
  controller tests
  scenario tests
  business requirement tests

unit tests: (atoms)
  desing/solution/implementation space
controller tests: (molecules)
  between analysis space & desing space
scenarios tests: +end-to-end tests highly recommended
  analysis space
business requirement tests: manual, human sanity check

sunny day
rainy day

use case

active voice use cases
passive voice requirements

use case:
  user-focused BASIC course ('sunny day')
  number of ALTERNATE courses ('rainy day')
  ?What are the users of the system trying to do? What is the user experience?
  gives:
    reliable time estimations
    effort
  how:
    describe system usage
    put usage description in the context of the object model
  rules:
    two-paragraph rule
    organize with actors and use case diagrams(group of use cases)
      association from the actor to use case
    write in active voice
    write using event/response flow, describing both sides of the user/system dialouge
      describe the steps involved
      write both sides of dialogue
    use GUI prototypes and screen mock-ups
    remember that use case is really a runtime behaviour specification
    write the use case in the context of the object model
      boundary objects (instances)
      classes
    write using noun-verb-noun sentence structure
      verbs are messages between objects. represents functions(controllers)
      nouns are object instances
    reference domain classes by name
    reference boundary classes by name
   basic = user action ? sustem action (response)
  fundamental questions:
    what happens? (sunny day scenario)
    and then what happens?
    what else might happen? (until all rainy-day scenarios you can think of are indentified)
  package diagram
  association: 
    <<invokes>> && <<precedes>>
    extends && includes
      defines a set of extension points in parent use case
      parent must know that it's going to be extended (in order to define the extension points)
      adds to parent's functionality, not overrides

Basic course:
  What happens? (and then what happens, and then what happens...)
Alternate courses:
  what else happens? (and how do we deal with that when it happens)
  what else happens? (and how do we deal with that when it happens)
  ...

DDT steps:
-2) profit: prototype vs long term extendable maintenable portable app
-1) create requirements
0) create use case (basic & alternate courses)
---
1) Create a robustness diagram (conceptual design) +++for use case
2) Create the controller test cases from robustness diagram
3) Add scenarios to each test case
4) Transform your controller test cases into test classes
5) Generate the controller test code
6) Detailed design: create a sequence diagram for the use case
7) Create unit test cases from yout sequence diagram, and cherry-pick the non-redundant ones
8) Fill in the test code using generated comments guidance, and write the code to make test pass

scenario:
  name
  description
  input
  acceptance criteria

requrements:
  name
  basic type:
    internal {internal to UML element}
    external {independent of any specific UML element}
  type:
    functional
    data
    performance
    capacity
    test
    display
    printing
    report
    validation
  [examples]
  level:
    low level {talking about class properties, or UI element, ATOM}
    high level {talking about classes, UI comonents, MOLECUL}

domain model
  [purpose]:
* defines the scope and forms the foundation on which to build use cases.
* provides a common vocabulary to enable clear communication between members of a project team.
* forms the foundation of the static part of model
* describes structure

  [what is it]:
* glossary
* live dictionary of terms
* shows graphically terms relations
* simplified class diagram

  domain object aka class
  relation
    aggregation {is-a, typeof}
    generalization {has-a, belongs-to}
    affordance {can-do}
    ??? {uses-a}
  static part of model {use case is dynamic part of model}
